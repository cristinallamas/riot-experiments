{
  "_args": [
    [
      {
        "raw": "riot-control",
        "scope": null,
        "escapedName": "riot-control",
        "name": "riot-control",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/cristinallamas/FE/playground/riot-experiments/todo-control"
    ]
  ],
  "_from": "riot-control@latest",
  "_id": "riot-control@1.0.0",
  "_inCache": true,
  "_location": "/riot-control",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "earksiinni",
    "email": "ersin.akinci@gmail.com"
  },
  "_npmVersion": "3.3.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "riot-control",
    "scope": null,
    "escapedName": "riot-control",
    "name": "riot-control",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/riot-control/-/riot-control-1.0.0.tgz",
  "_shasum": "4598594eec26cfef12b5f54ce0289da7e49c2b53",
  "_shrinkwrap": null,
  "_spec": "riot-control",
  "_where": "/Users/cristinallamas/FE/playground/riot-experiments/todo-control",
  "author": {
    "name": "Ersin Akinci",
    "email": "ersin.akinci@gmail.com",
    "url": "http://ersinakinci.com"
  },
  "bugs": {
    "url": "https://github.com/earksiinni/riot-control/issues"
  },
  "dependencies": {
    "riot": ">=2.3.0"
  },
  "deprecated": "renamed to RiotFlow to avoid confusion with RiotControl; npm install riotflow",
  "description": "A simple Rails-inspired router for Riot.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "4598594eec26cfef12b5f54ce0289da7e49c2b53",
    "tarball": "https://registry.npmjs.org/riot-control/-/riot-control-1.0.0.tgz"
  },
  "gitHead": "dac8f9de55c9da41ad71d4564653fd6e018656c1",
  "homepage": "https://github.com/earksiinni/riot-control#readme",
  "keywords": [
    "riotjs",
    "riot",
    "router",
    "rails"
  ],
  "license": "MIT",
  "main": "riot-control.js",
  "maintainers": [
    {
      "name": "earksiinni",
      "email": "ersin.akinci@gmail.com"
    }
  ],
  "name": "riot-control",
  "optionalDependencies": {},
  "readme": "# Riot Control\nA simple Rails-inspired router for Riot.js\n\n## Quick start\n\nInstall:\n\n`npm install riot-control`\n\nRouting code:\n\n```node\nvar RiotControl = require('riot-control');\n\nvar routes = {\n  home: function() { riot.mount('#view', 'homepage'); },\n  '': function() { riot.mount('#view', 'root'); },\n  pages: {\n    '': function() { riot.mount('#view', 'pages-index'); },\n    about: function() { riot.mount('#view', 'about'); },\n    contact: function() { riot.mount('#view', 'contact'); }\n  },\n  users: {\n    ':id': function() { riot.mount('#view', 'user-details'); }\n  },\n  // Fallback (e.g., #/wubadubadubdub)\n  '*': function() { riot.mount('#view', 'homepage'); }\n};\n\nvar router = new RiotControl(routes);\n```\n\n(Place the routing code wherever you like. I fancy putting it inside of a Riot tag container, like this:)\n\n```html\n<app>\n  <div id=\"view\" />\n  ...\n  <script>\n    ...routing code goes here...\n  </script>\n</app>\n```\n\n## Overview\n\nRiot Control provides Rails-like routing for your Riot.js-based web app. The intention was to keep the code simple and to use Riot.js' built-in routing capabilities.\n\n## Events\n\nRiot Control emits events using Riot's observable API to objects that are registered with the router. To register an object:\n\n```node\nvar router = new RiotControl(routes);\n\n...\n\nriot.router.registerObserver(tag);\n```\n\nNote that any new Riot Control instance adds itself as the `router` property on the Riot module. This allows for writing self-registering tags:\n\n```html\n<doohickey>\n  ...\n  <script>\n    riot.router.registerObserver(this);\n  </script>\n</doohickey>\n```\n\nRegistered observers can receive three events from Riot Control: `routeMatch`, `routeFallback`, and `routeFailure`. The requested hash `path` and any dynamic `params` are passed in as arguments to the event callback.\n\n### routeMatch\n\nIndicates that the router successfully matched the request with a route.\n\n```node\nthis.on('routeMatch', function(path, params) {\n  console.log(path + \" is a valid path.\");\n});\n```\n\n### routeFallback\n\nIndicates that the router wasn't able to match the request with a route, so the fallback route (`'*'`) was used.\n\n```node\nthis.on('routeFallback', function(path, params) {\n  console.log(path + \" could not be found, so the callback route was called.\");\n}\n```\n\n### routeFailure\n\nIndicates that the router was unable to match the request with any route. Consider this a 404.\n\n```node\nthis.on('routeFailure', function(path, params) {\n  console.log(path + \" could not be found. Rigor mortis.\");\n}\n```\n\n## Dynamic parameters\n\nRiot Control passes the `params` object to registered event handlers, which contains any parameters that were in the requested hash path. In order to use this feature, parameters must be indicated in the routes object using keys that are prefixed with colons (e.g., `:id`).\n\n```node\nvar routes = {\n  users: {\n    ':id': function() { ... }\n  }\n}\n\n...\n\nthis.on('routeMatch', function(path, params) {\n  if(path.substring(0, 6) == \"/users\") {\n    console.log(\"User \" + params.id + \" was requested.\");\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/earksiinni/riot-control.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.0"
}
